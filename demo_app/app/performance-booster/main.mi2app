#!/usr/bin/python
# Filename: main.mi2app

import errno
import os
import stat
import traceback

import mobile_insight
from mobile_insight.monitor import AndroidDevDiagMonitor, QmdlReplayer
from mobile_insight.analyzer import MsgLogger
from mi2app_utils import get_cache_dir, get_phone_model

from realtime_analyzer import RealtimeAnalyzer

def run_online_test(libwireshark_path, log_output_directory):
    # src = AndroidQmdlMonitor({  "ws_dissect_executable_path": "/system/bin/android_pie_ws_dissector",
    #                             "libwireshark_path": "/system/lib"})
    # log_directory = os.path.join(get_cache_dir(), "mobile_insight_log")
    # src.set_log_directory(log_directory)
    # # uses existing Diag.cfg

    lte_lvl1 = ["LTE_RRC_OTA_Packet",
                "LTE_RRC_Serv_Cell_Info_Log_Packet",
                "LTE_NAS_ESM_Plain_OTA_Incoming_Message",
                "LTE_NAS_ESM_Plain_OTA_Outgoing_Message",
                "LTE_NAS_EMM_Plain_OTA_Incoming_Message",
                "LTE_NAS_EMM_Plain_OTA_Outgoing_Message",
                "LTE_NAS_EMM_State",
                ]
    lte_lvl2 = ["LTE_ML1_Connected_Mode_LTE_Intra_Freq_Meas_Results",
                "LTE_ML1_IRAT_Measurement_Request",
                "LTE_ML1_Serving_Cell_Measurement_Result",
                "LTE_ML1_Connected_Mode_Neighbor_Meas_Req_Resp",
                "LTE_LL1_PDSCH_Demapper_Configuration",
                ]
    lte_lvl3 = ["LTE_PDCP_DL_SRB_Integrity_Data_PDU", 
                "LTE_PDCP_UL_SRB_Integrity_Data_PDU", 
                # "LTE_MAC_Configuration", 
                "LTE_MAC_UL_Transport_Block",
                "LTE_MAC_DL_Transport_Block",
                ]

    fifo_path = os.path.join(get_cache_dir(), "diag_revealer_fifo")
    src = AndroidDevDiagMonitor({   "ws_dissect_executable_path": "/system/bin/android_pie_ws_dissector",
                                    "libwireshark_path": libwireshark_path,
                                    "diag_revealer_executable_path": "/system/bin/diag_revealer",
                                    "diag_revealer_fifo_path": fifo_path,
                                    })
    src.enable_log(lte_lvl1 + lte_lvl2)
    src.set_skip_decoding(False)
    src.set_log_directory(os.path.join(log_output_directory, "logs"))
    src.set_log_cut_size(5.0)

    l = RealtimeAnalyzer()
    l.set_log_directory(log_output_directory)
    l.set_source(src)
    src.run() # Note that the collection can't stop ...


def run_decode_test(libwireshark_path, log_output_directory):
    directory = "/sdcard/decode_test"
    logs = sorted(os.listdir(directory))

    src = QmdlReplayer({"ws_dissect_executable_path": "/system/bin/android_pie_ws_dissector",
                        "libwireshark_path": libwireshark_path,})
    l = RealtimeAnalyzer()
    l.set_log_directory(log_output_directory)
    for f in logs:
        print "=== %s ===" % f
        src.set_input_path(os.path.join(directory, f))
        l.set_source(src)
        src.run()

try:
    if get_phone_model() == "LGLS660":  # LG Tribute
        libwireshark_path = "/sdcard/ws_dissector"
        log_output_directory = "/storage/external_SD/mobile_insight2"
    else:
        libwireshark_path = "/system/lib"
        log_output_directory = get_cache_dir()

    # run_online_test(libwireshark_path, log_output_directory)
    run_decode_test(libwireshark_path, log_output_directory)

except:
    print str(traceback.format_exc())
