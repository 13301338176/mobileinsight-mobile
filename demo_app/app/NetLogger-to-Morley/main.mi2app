#!/usr/bin/python
# Filename: main.mi2app

"""
Trace uploader main app

Author: Zengwen Yuan
"""

# To change the log file size, go to the  new-analyzer branch @ automator,
# and change line #126 at mobile_insight/monitor/android_dev_diag_monitor.py

import os
import sys
import traceback

import mobile_insight
from mobile_insight.monitor import AndroidDevDiagMonitor, AndroidQmdlMonitor
from upload_analyzer import UploadAnalyzer

import logging

logging.basicConfig(level=logging.CRITICAL)

def get_cache_dir():
    return str(service_context.getCacheDir().getAbsolutePath())

lte_lvl1 = [
            "LTE_RRC_OTA_Packet",
            "LTE_RRC_Serv_Cell_Info_Log_Packet",
            "LTE_NAS_ESM_Plain_OTA_Incoming_Message",
            "LTE_NAS_ESM_Plain_OTA_Outgoing_Message",
            "LTE_NAS_EMM_Plain_OTA_Incoming_Message",
            "LTE_NAS_EMM_Plain_OTA_Outgoing_Message",
            "LTE_NAS_EMM_State",

            # "LTE_ML1_Connected_Mode_LTE_Intra_Freq_Meas_Results",
            # "LTE_ML1_IRAT_Measurement_Request",
            # "LTE_ML1_Serving_Cell_Measurement_Result",
            # "LTE_ML1_Connected_Mode_Neighbor_Meas_Req_Resp",
            # "LTE_LL1_PDSCH_Demapper_Configuration",
            # "LTE_MAC_Configuration",
            # "LTE_MAC_UL_Transport_Block",
            # "LTE_MAC_DL_Transport_Block",
            ]
wcdma    = [
            # "WCDMA_Signaling_Messages",
            # "WCDMA_CELL_ID",
            ]
umts     = [
            # "UMTS_NAS_MM_State",
            # "UMTS_NAS_GMM_State",
            # "UMTS_NAS_OTA",
            ]

cdma2000 = [
            # "1xEV_Signaling_Control_Channel_Broadcast",
            # "CDMA_Paging_Channel_Message",
            ]

try:
    ## Use AndroidQmdlMonitor
    # print "MobileInsight2 (NetLogger): using the AndroidQmdlMonitor"
    # src = AndroidQmdlMonitor({  "ws_dissect_executable_path": "/system/bin/android_pie_ws_dissector",
    #                             "libwireshark_path": "/system/lib"})

    ## Use AndroidDevDiagMonitor
    logging.info("MobileInsight2 (NetLogger): using the AndroidDevDiagMonitor")
    fifo_path = os.path.join(get_cache_dir(), "diag_revealer_fifo")
    src = AndroidDevDiagMonitor({   "ws_dissect_executable_path": "/system/bin/android_pie_ws_dissector",
                                    "libwireshark_path": "/system/lib",
                                    # "libwireshark_path": "/sdcard/ws_dissector",
                                    "diag_revealer_executable_path": "/system/bin/diag_revealer",
                                    "diag_revealer_fifo_path": fifo_path,
                                    })
    src.set_skip_decoding(False)

    log_directory = os.path.join(get_cache_dir(), "mobile_insight_log")
    src.set_log_directory(log_directory)
    src.enable_log(lte_lvl1 + wcdma + umts)

    uploadAnalyzer = UploadAnalyzer()
    uploadAnalyzer.set_source(src)

    src.run()

except:
    print str(traceback.format_exc())
