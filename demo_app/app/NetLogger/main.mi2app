#!/usr/bin/python
# Filename: main.mi2app

"""
Cellular event logging main app

Author: Zengwen Yuan
"""

import os
import sys
import traceback

import mi2app_utils
import mobile_insight
from mobile_insight.monitor import OnlineMonitor
from logging_analyzer import LoggingAnalyzer

cfg_file = "netlogger.cfg"

lte_lvl1 = [
            'LTE_RRC_OTA_Packet',
            'LTE_RRC_Serv_Cell_Info',
            'LTE_RRC_MIB_Packet',
            'LTE_RRC_MIB_Message_Log_Packet',
            'LTE_NAS_ESM_State',
            'LTE_NAS_ESM_OTA_Incoming_Packet',
            'LTE_NAS_ESM_OTA_Outgoing_Packet',
            'LTE_NAS_EMM_State',
            'LTE_NAS_EMM_OTA_Incoming_Packet',
            'LTE_NAS_EMM_OTA_Outgoing_Packet',
            ]
lte_lvl2 = [
            # 'LTE_MAC_UL_Transport_Block',
            # 'LTE_MAC_DL_Transport_Block',
            ]
lte_lvl3 = [
            # 'LTE_PHY_PDSCH_Packet',
            # 'LTE_PHY_Serv_Cell_Measurement',
            # 'LTE_PHY_Connected_Mode_Intra_Freq_Meas',
            # 'LTE_PHY_Connected_Mode_Neighbor_Measurement',
            ]
wcdma    = [
            'WCDMA_RRC_OTA_Packet',
            'WCDMA_RRC_Serv_Cell_Info',
            ]
umts     = [
            'UMTS_NAS_OTA_Packet',
            'UMTS_NAS_GMM_State',
            'UMTS_NAS_MM_State',
            'UMTS_NAS_MM_REG_State',
            ]

try:
    cache_directory = mi2app_utils.get_cache_dir()
    files_directory = mi2app_utils.get_files_dir()
    log_directory   = os.path.join(cache_directory, "mi2log")
    app_directory   = os.path.join(files_directory, "app/NetLogger")
    fifo_path       = os.path.join(cache_directory, "diag_revealer_fifo")
    
    print "MobileInsight (NetLogger): using the OnlineMonitor"
    src = OnlineMonitor()
    src.set_skip_decoding(False)
    src.set_log_directory(log_directory)

    # try to read the config file
    try:
        cfg = open(os.path.join("/sdcard/mobile_insight/cfg/", cfg_file), 'r')
    except IOError:
        cfg = open(os.path.join(app_directory, cfg_file), 'r')

        lines = cfg.read().splitlines()
        for line in lines:
            if line.rstrip('\n'):
                if '#' in line:
                    continue
                else:
                    print "MobileInsight (NetLogger): config_log -- src.enable_log(" + line + ")"
                    src.enable_log(line)
        cfg.close()
    else:
        print "MobileInsight (NetLogger): config file open failed, use default logs"
        src.enable_log(lte_lvl1 + lte_lvl2 + lte_lvl3 + wcdma + umts)

    loggingAnalyzer = LoggingAnalyzer()
    loggingAnalyzer.set_source(src)

    src.run()
    
except:
    print str(traceback.format_exc())
