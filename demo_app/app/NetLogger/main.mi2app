#!/usr/bin/python
# Filename: main.mi2app

"""
Trace uploader main app

Author: Zengwen Yuan
"""

import os
import sys
import traceback

import mobile_insight
from mobile_insight.monitor import OnlineMonitor
from logging_analyzer import LoggingAnalyzer

def get_cache_dir():
    return str(service_context.getCacheDir().getAbsolutePath())


cfg_log_collection_file = "/sdcard/mobileinsight/cfg/netlogger.cfg"

lte_lvl1 = [
            'LTE_RRC_OTA_Packet',
            'LTE_RRC_Serv_Cell_Info',
            'LTE_RRC_MIB_Packet',
            'LTE_RRC_MIB_Message_Log_Packet',
            'LTE_NAS_ESM_State',
            'LTE_NAS_ESM_OTA_Incoming_Packet',
            'LTE_NAS_ESM_OTA_Outgoing_Packet',
            'LTE_NAS_EMM_State',
            'LTE_NAS_EMM_OTA_Incoming_Packet',
            'LTE_NAS_EMM_OTA_Outgoing_Packet',
            ]
lte_lvl2 = [
            # 'LTE_MAC_UL_Transport_Block',
            # 'LTE_MAC_DL_Transport_Block',
            ]
lte_lvl3 = [
            # 'LTE_PHY_PDSCH_Packet',
            # 'LTE_PHY_Serv_Cell_Measurement',
            # 'LTE_PHY_Connected_Mode_Intra_Freq_Meas',
            # 'LTE_PHY_Connected_Mode_Neighbor_Measurement',
            ]
wcdma    = [
            'WCDMA_RRC_OTA_Packet',
            'WCDMA_RRC_Serv_Cell_Info',
            ]
umts     = [
            'UMTS_NAS_OTA_Packet',
            'UMTS_NAS_GMM_State',
            'UMTS_NAS_MM_State',
            'UMTS_NAS_MM_REG_State',
            ]

try:
    print "MobileInsight (NetLogger): using the OnlineMonitor"
    fifo_path = os.path.join(get_cache_dir(), "diag_revealer_fifo")
    src = OnlineMonitor()
    src.set_skip_decoding(False)

    log_directory = os.path.join(get_cache_dir(), "cellular_log")
    src.set_log_directory(log_directory)
    
    # try to read the config file
    try:
        cfg = open(cfg_log_collection_file, 'r')
        lines = cfg.read().splitlines()

        for line in lines:
            if line.rstrip('\n'):
                if '#' in line:
                    continue
                else:
                    print "MobileInsight (NetLogger): config_log -- src.enable_log(" + line + ")"
                    src.enable_log(line)
        cfg.close()
    except:
        print "MobileInsight (NetLogger): config file open failed, use default logs"
        src.enable_log(lte_lvl1 + lte_lvl2 + lte_lvl3 + wcdma + umts)

    loggingAnalyzer = LoggingAnalyzer()
    loggingAnalyzer.set_source(src)

    src.run()
    
except:
    print str(traceback.format_exc())
